(1) train dataset move
저장된 yolo dataset을 yolo5-master 폴더 안에 위치 시키기

(2) yaml파일 생성
coco.yaml, VOC.yalm등등은 데이터셋의 클래스 레이블과 클래스 ID, 색상 등의 메타데이터 정보를 감고있는데 이와같은 taml파일을 만들어보자
data 폴더 아래 my_yaml.yaml 파일 하나만들고 coco에서 양식 가져와 붙여서 path와 classes 수정

-------------------------------------
train: ./yolo_dataset/train/images
val: ./yolo_dataset/val/images


# Classes
names:
  0: 0
  1: 1
  2: 2
  3: 3
--------------------------------------

(3) hyps file setting : lr, aug val......

data > hyps> xxx.yaml ( hyp파일들로 모델들의 하이퍼파라미터 설정하기)
우리는 여기서 low 부분을 건들일 것이다.

* hyp.scratcj-high.yaml,  hyp.scratcj-low.yaml, hyp.scratcj-med.yaml
hyp.scratcj-high.yaml -> model size n or s
hyp.scratcj-low.yaml -> model size m
hyp.scratcj-med.yaml -> model size l or x

low hyp"는 "Low-level Hyperparameters"를 의미
이러한 하이퍼파라미터들은 YOLOv5의 네트워크 구조와 학습 설정에 영향을 미치는 매개변수들을 말함.
여기서 aug 설정할 수도 있지만 아니면 utils> augmentations에서 설정해도 된다.
utils> plots는 learning될때 그래프를 그려주는 기능이다.여기서 뭔가 마음에 안들면 metric에 들어가서 커브를 직접 그려도 된다.
그 외 utils 기능들 살쳐볼 것

(4) train.py
parser 부분 정보만 고치면 되는데 아래 부분 위주로 고치면 됨
    [1]
    parser.add_argument('--weights', type=str, default=ROOT / 'yolov5s.pt', help='initial weights path')
    >>> pre-train model selection : yolov5s.pt / yolov5n.pt / yolov5m.pt (small/large/medium)

    [2]
    parser.add_argument('--cfg', type=str, default='', help='model.yaml path')
    >>> pre-train model -> model.yaml 파일 선택
    models > yolo 모델들에 맞는 yaml파일들이 존재하니 여기서 [1]에서 선택했던 모델에 맞는 yaml파일 선택

    but YOLOv5n6 -> model.yaml? -> ./models/hub/yolov5n6.yaml

    [3]
    yaml파일 경로 수정
    parser.add_argument('--data', type=str, default=ROOT / 'data/my_yaml.yaml', help='dataset.yaml path')

    [4]
    hyp파일 경로 수정(low/med/high?)
    parser.add_argument('--hyp', type=str, default=ROOT / 'data/hyps/hyp.scratch-low.yaml', help='hyperparameters path')

    [5]
    epoch 몇번 돌릴건지 정하기, batch size
    parser.add_argument('--epochs', type=int, default=100, help='total training epochs')
    parser.add_argument('--batch-size', type=int, default=24, help='total batch size for all GPUs, -1 for autobatch')

    [6]
    이미지 사이즈 모델에 맞는 사이즈 사용
    parser.add_argument('--imgsz', '--img', '--img-size', type=int, default=640, help='train, val image size (pixels)')

     >> 예를 들어 yolov5n6 : image defult = 1280

    [7]
    터미널에서
    parser.add_argument('--rect', action='store_true', help='rectangular training')
    >> 터미널에서 $python train.py --rect 명령어로 사용

    [8]
    parser.add_argument('--resume', nargs='?', const=True, default=False, help='resume most recent training')
    학습 멈춘 곳에서 다시 시작
    >> $python train.py --resume

    [9]
    parser.add_argument('--multi-scale', action='store_true', help='vary img-size +/- 50%%')
    image input 640 += 320 | 최대 640+320 = 960 | 최소 640-320=320| 사이즈까지 이미지 조절됨

    [10]
    optimizer 선택
    parser.add_argument('--optimizer', type=str, choices=['SGD', 'Adam', 'AdamW'], default='SGD', help='optimizer')
    기본제공되는 3개 중 선택, 다른게 쓰고 싶으면 찾아가서 추가해야함.. torch_utils.py에 가면 있을 것임
    yolov5-master\yolov5-master\utils\torch_utils.py

    [11]
    저장 폴더 설정
    parser.add_argument('--project', default=ROOT / 'runs/train', help='save to project/name')
    parser.add_argument('--name', default='exp', help='save to project/name')

    [12]
    라벨 스무딩
    parser.add_argument('--label-smoothing', type=float, default=0.0, help='Label smoothing epsilon')

    [13]
    전역 시드값 설정
    parser.add_argument('--seed', type=int, default=0, help='Global training seed')

(5) 터미널에서 가상환경 들어가고 이 폴더까지 cd해준 후

pip install -r requirements.txt 해서 필요한거 다 삭제
python train.py해서 트레인 돌려주면 된다.
혹시 데이터 등 수정하고나서 다시 돌릴 일이 있으면 데이터셋 폴더 아래 생성된 캐쉬파일 삭제하고 하기
